service: form-checker
org: andresmweber
useDotenv: true
plugins:
  - serverless-domain-manager
  - serverless-plugin-git-variables
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-deployment-bucket
  - serverless-python-requirements
  # - serverless-layers
  # - serverless-export-env

package:
  excludeDevDependencies: true
  individually: true
  exclude:
    - ./**
  include:
    - form_checker/**/*.py

provider:
  name: aws
  profile: aw
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: ${self:custom.serverlessBranch, self:custom.gitBranch, opt:stage, env:STAGE}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: UploadBucket
  tags:
    GIT-USER: ${self:custom.serverlessGitUser}
    PROPERTY: "form-checker"
  environment:
    DEBUG: ${env:DEBUG, 'form-checker:*'}
    SLS_DEBUG: ${env:SLS_DEBUG, ''}
    REGION: ${self:provider.region}
    STAGE: ${env:STAGE, self:provider.stage}
    DOMAIN: form-${self:custom.subdomain}.andresmweber.com
    BUCKET: ${self:custom.imageBucket}
    BRANCH: ${self:custom.serverlessBranch, self:custom.gitBranch}
    GIT_BRANCH: ${self:custom.gitBranch}
    COVERALLS_SERVICE_NAME: serverless
    COVERALLS_GIT_BRANCH: ${self:custom.serverlessBranch, self:custom.gitBranch}
    DEPLOY_BUCKET: "form-checker-sls-deployment"
  deploymentBucket:
    name: ${self:provider.environment.DEPLOY_BUCKET}
    serverSideEncryption: AES256

custom:
  imageBucket: ${env:UPLOAD_BUCKET}
  pythonRequirements:
    usePoetry: true
    zip: true
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: false
    layer: true
    slim: true
    # slimPatternsAppendDefaults: false
    slimPatterns:
      - '**/*.egg-info*'
      - '**/botocore/**'
      - '**/s3transfer/**'
      - '**/opencv_python.libs/**'
      - '**/numpy.libs/**'
      - '**/opencv_contrib_python/**'
      - '**/opencv_contrib_python.libs/**'
      - '**/*.dist-info/**'
    invalidateCaches: false
    noDeploy:
      - boto3
      - botocore
      - jmespath
      - s3transfer
      - opencv_contrib_python
  customDomain:
    domainName: ${self:provider.environment.DOMAIN}
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
  subdomains:
    main: "api"
    master: "api"
  subdomain: ${self:custom.subdomains.${self:provider.stage}, ${self:provider.stage}}
  gitBranch: ${git:branch}
  serverlessBranch: ${env:SERVERLESS_BRANCH}
  serverlessGitUser: ${env:SERVERLESS_COMMIT_USER}
  # serverless-layers:
  #   layersDeploymentBucket: ${self:provider.environment.DEPLOY_BUCKET}

functions:
  version:
    handler: form_checker.handlers.version.handler
    events:
      - http:
          path: version
          method: get
          cors: true
  upload:
    handler: form_checker.handlers.upload.handler
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - s3:
          bucket: ${self:custom.imageBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .mp4
          existing: true

  presigned:
    handler: form_checker.handlers.presigned.handler
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: presigned
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
            allowCredentials: false

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 3
              Prefix: "/"
              Status: Enabled
        BucketName: ${self:custom.imageBucket}
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: false
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
                - POST
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    UploadBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: arn:aws:s3:::${self:custom.imageBucket}/*
        Bucket:
          Ref: UploadBucket
